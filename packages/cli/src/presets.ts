// presets.ts
// ============================================
// ðŸ“¦ Config Presets - Ø¥Ø¹Ø¯Ø§Ø¯Ø§Øª Ø¬Ø§Ù‡Ø²Ø©
// ============================================

export interface ProjectPreset {
  name: string;
  description: string;
  files: Record<string, string>;
  dependencies: string[];
  devDependencies: string[];
  scripts: Record<string, string>;
  gitignore: string[];
}

export const PRESETS: Record<string, ProjectPreset> = {
  react: {
    name: 'React Project',
    description: 'React application with TypeScript',
    files: {
      'src/App.tsx': `import React from 'react';

function App() {
  return (
    <div className="App">
      <h1>Welcome to React!</h1>
    </div>
  );
}

export default App;`,
      'src/index.tsx': `import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,
      'public/index.html': `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>React App</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>`,
      'tsconfig.json': JSON.stringify({
        compilerOptions: {
          target: 'ES2020',
          lib: ['ES2020', 'DOM', 'DOM.Iterable'],
          jsx: 'react-jsx',
          module: 'ESNext',
          moduleResolution: 'bundler',
          strict: true,
          esModuleInterop: true
        }
      }, null, 2)
    },
    dependencies: ['react', 'react-dom'],
    devDependencies: ['@types/react', '@types/react-dom', 'typescript', 'vite', '@vitejs/plugin-react'],
    scripts: {
      dev: 'vite',
      build: 'tsc && vite build',
      preview: 'vite preview'
    },
    gitignore: ['node_modules', 'dist', '.env', '.DS_Store']
  },

  nextjs: {
    name: 'Next.js Project',
    description: 'Next.js application with TypeScript and App Router',
    files: {
      'app/page.tsx': `export default function Home() {
  return (
    <main className="p-8">
      <h1 className="text-4xl font-bold">Welcome to Next.js!</h1>
    </main>
  );
}`,
      'app/layout.tsx': `export const metadata = {
  title: 'Next.js App',
  description: 'Generated by oqool',
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}`,
      'tsconfig.json': JSON.stringify({
        compilerOptions: {
          target: 'ES2017',
          lib: ['dom', 'dom.iterable', 'esnext'],
          allowJs: true,
          skipLibCheck: true,
          strict: true,
          noEmit: true,
          esModuleInterop: true,
          module: 'esnext',
          moduleResolution: 'bundler',
          resolveJsonModule: true,
          isolatedModules: true,
          jsx: 'preserve',
          incremental: true,
          plugins: [{ name: 'next' }]
        }
      }, null, 2)
    },
    dependencies: ['next', 'react', 'react-dom'],
    devDependencies: ['@types/node', '@types/react', '@types/react-dom', 'typescript'],
    scripts: {
      dev: 'next dev',
      build: 'next build',
      start: 'next start',
      lint: 'next lint'
    },
    gitignore: ['node_modules', '.next', 'out', '.env.local', '.DS_Store']
  },

  express: {
    name: 'Express API',
    description: 'Express.js REST API with TypeScript',
    files: {
      'src/index.ts': `import express from 'express';

const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());

app.get('/', (req, res) => {
  res.json({ message: 'Welcome to Express API!' });
});

app.listen(port, () => {
  console.log(\`Server running on port \${port}\`);
});`,
      'src/routes/api.ts': `import { Router } from 'express';

const router = Router();

router.get('/health', (req, res) => {
  res.json({ status: 'ok' });
});

export default router;`,
      'tsconfig.json': JSON.stringify({
        compilerOptions: {
          target: 'ES2020',
          module: 'commonjs',
          lib: ['ES2020'],
          outDir: './dist',
          rootDir: './src',
          strict: true,
          esModuleInterop: true,
          skipLibCheck: true,
          forceConsistentCasingInFileNames: true
        }
      }, null, 2)
    },
    dependencies: ['express', 'dotenv'],
    devDependencies: ['@types/express', '@types/node', 'typescript', 'nodemon', 'ts-node'],
    scripts: {
      dev: 'nodemon src/index.ts',
      build: 'tsc',
      start: 'node dist/index.js'
    },
    gitignore: ['node_modules', 'dist', '.env', '.DS_Store']
  }
};
